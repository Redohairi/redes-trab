import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Navbar from './Navbar';
import AdminNavbar from './AdminNavbar';
import api from '../api';

export default function DynamicNavbar() {
  const [userInfo, setUserInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const location = useLocation();

  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        const token = localStorage.getItem('access');
        console.log('üîë Token no localStorage:', token ? 'EXISTE' : 'N√ÉO EXISTE');
        
        if (!token) {
          console.log('‚ùå Sem token, n√£o √© poss√≠vel buscar info do usu√°rio');
          setLoading(false);
          return;
        }

        // Decodificar o token JWT para pegar o user_id
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          const userId = payload.user_id;
          console.log('üÜî User ID do token:', userId);
          
          console.log('üì° Fazendo requisi√ß√£o para users/' + userId + '/');
          const response = await api.get(`users/${userId}/`);
          console.log('‚úÖ Dados do usu√°rio recebidos:', response.data);
          setUserInfo(response.data);
        } catch (tokenError) {
          console.error('‚ùå Erro ao decodificar token:', tokenError);
        }
      } catch (err) {
        console.error('‚ùå Erro ao buscar informa√ß√µes do usu√°rio:', err);
        console.error('‚ùå Status:', err.response?.status);
        console.error('‚ùå Data:', err.response?.data);
      } finally {
        setLoading(false);
      }
    };

    fetchUserInfo();
  }, []);

  // Se estiver na p√°gina de login, n√£o mostrar navbar
  if (location.pathname === '/login') {
    console.log('üö´ P√°gina de login detectada, n√£o mostrando navbar');
    return null;
  }

  // Se ainda estiver carregando, n√£o mostrar nada
  if (loading) {
    console.log('‚è≥ Ainda carregando informa√ß√µes do usu√°rio...');
    return null;
  }

  // Se n√£o h√° informa√ß√µes do usu√°rio (n√£o logado), n√£o mostrar navbar
  if (!userInfo) {
    console.log('‚ùå Nenhuma informa√ß√£o do usu√°rio dispon√≠vel');
    return null;
  }

  // Verifica se √© admin de v√°rias formas:
  const hasTeacherGroup = userInfo?.groups?.some(group => group.name === 'professor');
  const isStaff = userInfo?.is_staff;
  const isSuperuser = userInfo?.is_superuser;
  
  const isAdmin = hasTeacherGroup || isStaff || isSuperuser;
  
  console.log('üîß DETALHES DA VERIFICA√á√ÉO DE ADMIN:');
  console.log('   - Usu√°rio:', userInfo.username);
  console.log('   - ID:', userInfo.id);
  console.log('   - is_staff:', isStaff);
  console.log('   - is_superuser:', isSuperuser);
  console.log('   - Grupos:', userInfo.groups);
  console.log('   - hasTeacherGroup:', hasTeacherGroup);
  console.log('   - RESULTADO isAdmin:', isAdmin);
  console.log('   - Navbar que ser√° mostrada:', isAdmin ? 'ADMIN' : 'NORMAL');

  return isAdmin ? <AdminNavbar /> : <Navbar />;
} 